import*as s from"buffer";function c(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function l(e){if(e.__esModule)return e;var o=e.default;if(typeof o=="function"){var n=function f(){return this instanceof f?Reflect.construct(o,arguments,this.constructor):o.apply(this,arguments)};n.prototype=o.prototype}else n={};return Object.defineProperty(n,"__esModule",{value:!0}),Object.keys(e).forEach(function(f){var p=Object.getOwnPropertyDescriptor(e,f);Object.defineProperty(n,f,p.get?p:{enumerable:!0,get:function(){return e[f]}})}),n}var y=l(s),i=y,u=i.Buffer,t={},r;for(r in i)i.hasOwnProperty(r)&&(r==="SlowBuffer"||r==="Buffer"||(t[r]=i[r]));var a=t.Buffer={};for(r in u)u.hasOwnProperty(r)&&(r==="allocUnsafe"||r==="allocUnsafeSlow"||(a[r]=u[r]));if(t.Buffer.prototype=u.prototype,(!a.from||a.from===Uint8Array.from)&&(a.from=function(e,o,n){if(typeof e=="number")throw new TypeError('The "value" argument must not be of type number. Received type '+typeof e);if(e&&typeof e.length>"u")throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);return u(e,o,n)}),a.alloc||(a.alloc=function(e,o,n){if(typeof e!="number")throw new TypeError('The "size" argument must be of type number. Received type '+typeof e);if(e<0||e>=2*(1<<30))throw new RangeError('The value "'+e+'" is invalid for option "size"');var f=u(e);return!o||o.length===0?f.fill(0):typeof n=="string"?f.fill(o,n):f.fill(o),f}),!t.kStringMaxLength)try{t.kStringMaxLength=process.binding("buffer").kStringMaxLength}catch{}t.constants||(t.constants={MAX_LENGTH:t.kMaxLength},t.kStringMaxLength&&(t.constants.MAX_STRING_LENGTH=t.kStringMaxLength));var g=t,h=c(g);export{h as default};
